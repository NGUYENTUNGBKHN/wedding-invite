function getQueryParam(param) {
  const urlParams = new URLSearchParams(window.location.search);
  return urlParams.get(param);
}

const guestId = getQueryParam('guest');
const invitationDiv = document.getElementById('invitation');
const rsvpDiv = document.getElementById('rsvp');

if (!guestId) {
  invitationDiv.innerHTML = '<p>Link kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ th√¥ng tin kh√°ch m·ªùi.</p>';
} else {
  db.collection('guests').doc(guestId).get()
    .then(doc => {
      if (doc.exists) {
        const data = doc.data();
        let str_rsvpStatus = '';
        let val_rsvpStatus = 0;
        switch (data.rsvp) {
          case 'accepted': str_rsvpStatus = 's·∫Ω tham d·ª± üíñ'; val_rsvpStatus = 1; break;
          case 'declined': str_rsvpStatus = 'kh√¥ng tham d·ª± üò¢'; val_rsvpStatus = 2; break;
          default: str_rsvpStatus = 'ch∆∞a ph·∫£n h·ªìi'; val_rsvpStatus = 3;
        }

        invitationDiv.innerHTML = `
          <h2> ${data.name} </h2>
          <p>Th√¢n m·ªùi ${data.message}</p>
          <p>T·ªõi d·ª± b·ªØa c∆°m th√¢n m·∫≠t chung vui c√πng gia ƒë√¨nh ch√∫ng t√¥i.</p>
          <p>V√†o l√∫c: 10:00 Th·ª© b·∫£y</p>
          <p>24.01.2026</p>
          <p>(T·ª©c ng√†y 06 th√°ng 12 nƒÉm ·∫§t T·ªµ)</p>
          <p>T·∫°i : Ph·ªß Ch·ªß t·ªãch</p>
          <p>S·ªë 01 Ho√†n Ki·∫øm H√† N·ªôi</p>
          <p>S·ª± hi·ªán di·ªán c·ªßa qu√Ω v·ªã</p>
          <p>l√† ni·ªÅm vinh h·∫°nh cho gia ƒë√¨nh ch√∫ng t√¥i.</p>
          <div class="footer-display_2">
            <div class="footer_2">
              <div class="left-box_2">
                <div class="label_2">Nh√† Trai</div>
                <div class="label_2">Nguy·ªÖn VƒÉn T·ªµ</div>
                <div class="label_2">ƒê·ªó Th·ªã H·∫£i</div>
              </div>
              <div class="right-box_2">
                <div class="label_2">Nh√† G√°i</div>
                <div class="label_2">Tr∆∞∆°ng Ti·∫øn Th·ª•c</div>
                <div class="label_2">Phan Th·ªã H·ªìng The</div>
              </div>
            </div>
          </div>
          
        `;
        if (val_rsvpStatus == 1)
        {
          invitationDiv.innerHTML += `
          <p>B·∫°n ${str_rsvpStatus}</p>
          <strong>T√πng v√† Th·ª•c Anh r·∫•t vui !! C·∫£m ∆°n b·∫°n.</strong>`;
        } 
        else if (val_rsvpStatus == 2)
        {
          invitationDiv.innerHTML += `
          <p>B·∫°n ${str_rsvpStatus} </p>
          <strong>T√πng v√† Th·ª•c Anh r·∫•t ti·∫øc !! C·∫£m ∆°n b·∫°n.</strong>`;
        }
        else // val_rsvpStatus == 3
        {
          invitationDiv.innerHTML += `
          <p>B·∫°n ${str_rsvpStatus} </p>
          <p>H√£y ph·∫£n h·ªìi cho c√¥ d√¢u ch√∫ r·ªÉ ·ªü ƒë√¢y nh√© !!</p>
          <button class="corner-button" onclick="openDialog()">L·ªùi ch√∫c</button>`;
        }
        

        if (data.rsvp === 'pending') {
          rsvpDiv.style.display = 'block';
        }
      } else {
        invitationDiv.innerHTML = '<p>Kh√¥ng t√¨m th·∫•y th√¥ng tin kh√°ch m·ªùi.</p>';
      }
    })
    .catch(error => {
      invitationDiv.innerHTML = `<p>L·ªói khi t·∫£i d·ªØ li·ªáu: ${error.message}</p>`;
    });
}

const wishesInput = document.getElementById('wishesText'); // Th√™m d√≤ng n√†y

function sendRSVP(status) {
  const confirmText = status === 'accepted'
    ? 'B·∫°n x√°c nh·∫≠n s·∫Ω tham d·ª± ch·ª©?'
    : 'B·∫°n x√°c nh·∫≠n s·∫Ω kh√¥ng tham d·ª±?';

  if (!confirm(confirmText)) return;

  const guestWishes = wishesInput ? wishesInput.value : '';

  db.collection('guests').doc(guestId).update({ rsvp: status, wishes: guestWishes })
    .then(() => {
      alert('C·∫£m ∆°n b·∫°n ƒë√£ ph·∫£n h·ªìi!');
      location.reload();
    })
    .catch(err => {
      alert('L·ªói khi g·ª≠i ph·∫£n h·ªìi: ' + err.message);
    });
}

// function sendRSVP(status) {
//   const confirmText = status === 'accepted'
//     ? 'B·∫°n x√°c nh·∫≠n s·∫Ω tham d·ª± ch·ª©?'
//     : 'B·∫°n x√°c nh·∫≠n s·∫Ω kh√¥ng tham d·ª±?';

//   if (!confirm(confirmText)) return;

//   // Ki·ªÉm tra guestId c√≥ t·ªìn t·∫°i tr∆∞·ªõc khi g·ª≠i
//   if (!guestId) {
//     alert('Kh√¥ng t√¨m th·∫•y ID kh√°ch m·ªùi ƒë·ªÉ g·ª≠i ph·∫£n h·ªìi.');
//     return;
//   }

//   // L·∫•y l·ªùi ch√∫c t·ª´ input
//   const guestWishes = wishesInput ? wishesInput.value : ''; // L·∫•y gi√° tr·ªã, n·∫øu input t·ªìn t·∫°i

//   // T·∫°o ƒë·ªëi t∆∞·ª£ng d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t
//   const updateData = { rsvp: status, wishes: guestWishes };

//   updateDoc(doc(db, 'guests', guestId), updateData) // S·ª≠a th√†nh updateData
//     .then(() => {
//       alert('C·∫£m ∆°n b·∫°n ƒë√£ ph·∫£n h·ªìi!');
//       location.reload(); // T·∫£i l·∫°i trang ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i m·ªõi
//     })
//     .catch(err => {
//       alert('L·ªói khi g·ª≠i ph·∫£n h·ªìi: ' + err.message);
//       console.error("L·ªói khi c·∫≠p nh·∫≠t RSVP:", err);
//     });
// }

document.addEventListener('DOMContentLoaded', () => {
    const hamburgerToggle = document.querySelector('.hamburger-menu-toggle');
    const navLinksContainer = document.querySelector('.nav-links-container');
    const navButtons = document.querySelectorAll('.nav-links-container .nav-button'); // Ch·ªçn t·∫•t c·∫£ c√°c n√∫t nav

    if (hamburgerToggle && navLinksContainer) {
        hamburgerToggle.addEventListener('click', () => {
            navLinksContainer.classList.toggle('active');
            hamburgerToggle.classList.toggle('active'); // Th√™m class 'active' cho icon hamburger
        });

        // ƒê√≥ng menu khi click v√†o m·ªôt n√∫t ƒëi·ªÅu h∆∞·ªõng
        navButtons.forEach(button => {
            button.addEventListener('click', () => {
                // Ki·ªÉm tra n·∫øu menu ƒëang m·ªü (c√≥ class 'active') tr√™n mobile th√¨ ƒë√≥ng l·∫°i
                if (window.innerWidth <= 768 && navLinksContainer.classList.contains('active')) {
                    navLinksContainer.classList.remove('active');
                    hamburgerToggle.classList.remove('active');
                }
            });
        });
    }

    // --- C√°c ƒëo·∫°n m√£ JavaScript kh√°c c·ªßa b·∫°n (gallery.js, music.js, v.v.) s·∫Ω ·ªü ƒë√¢y ---
    // ƒê·∫£m b·∫£o r·∫±ng b·∫°n ƒë√£ k·∫øt h·ª£p t·∫•t c·∫£ logic JS v√†o m·ªôt t·ªáp ho·∫∑c t·∫£i ch√∫ng theo ƒë√∫ng th·ª© t·ª±.
});
