function getQueryParam(param) {
  const urlParams = new URLSearchParams(window.location.search);
  return urlParams.get(param);
}

const guestId = getQueryParam('guest');
const invitationDiv = document.getElementById('invitation-card-2');
const rsvpDiv = document.getElementById('rsvp');


function updateInvitationRSVPStatus(data) {
  let str_rsvpStatus = '';
  let val_rsvpStatus = 0;
  switch (data.rsvp) {
    case 'accepted': str_rsvpStatus = 's·∫Ω tham d·ª± üíñ'; val_rsvpStatus = 1; break;
    case 'declined': str_rsvpStatus = 'kh√¥ng tham d·ª± üò¢'; val_rsvpStatus = 2; break;
    default: str_rsvpStatus = 'ch∆∞a ph·∫£n h·ªìi'; val_rsvpStatus = 3;
  }

  let rsvpStatusHtml = '';
  if (val_rsvpStatus === 1) {
    rsvpStatusHtml = `
      <p>B·∫°n ${str_rsvpStatus}</p>
      <strong>T√πng v√† Th·ª•c Anh r·∫•t vui !! C·∫£m ∆°n b·∫°n.</strong>
      <button class="confirm-button" onclick="openDialog()">S·ª≠a l·ªùi ch√∫c</button>`;
  } else if (val_rsvpStatus === 2) {
    rsvpStatusHtml = `
      <p>B·∫°n ${str_rsvpStatus} </p>
      <strong>T√πng v√† Th·ª•c Anh r·∫•t ti·∫øc !! C·∫£m ∆°n b·∫°n.</strong>
      <button class="confirm-button" onclick="openDialog()">S·ª≠a l·ªùi ch√∫c</button>`;
  } else { // val_rsvpStatus === 3
    rsvpStatusHtml = `
      <p>B·∫°n ${str_rsvpStatus} </p>
      <p>H√£y ph·∫£n h·ªìi cho c√¥ d√¢u ch√∫ r·ªÉ ·ªü ƒë√¢y nh√© !!</p>
      <button class="confirm-button" onclick="openDialog()">L·ªùi ch√∫c</button>`;
  }

  // T√¨m v√† c·∫≠p nh·∫≠t ph·∫ßn tr·∫°ng th√°i RSVP trong invitationDiv
  // N·∫øu ch∆∞a c√≥, s·∫Ω th√™m v√†o.
  const existingStatus = invitationDiv.querySelector('.rsvp-status-display');
  if (existingStatus) {
    existingStatus.innerHTML = rsvpStatusHtml;
  } else {
    // N·∫øu ph·∫ßn t·ª≠ ch∆∞a t·ªìn t·∫°i, th√™m n√≥ v√†o cu·ªëi invitationDiv
    const statusWrapper = document.createElement('div');
    statusWrapper.classList.add('rsvp-status-display');
    statusWrapper.innerHTML = rsvpStatusHtml;
    invitationDiv.appendChild(statusWrapper);
  }
}


if (!guestId) {
  invitationDiv.innerHTML = '<p>Link kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ th√¥ng tin kh√°ch m·ªùi.</p>';
} else {
  db.collection('guests').doc(guestId).get()
    .then(doc => {
      if (doc.exists) {
        const data = doc.data();
        invitationDiv.innerHTML = `
          <h2> ${data.name} </h2>
          <p>Th√¢n m·ªùi ${data.message}</p>
          <p>T·ªõi d·ª± b·ªØa c∆°m th√¢n m·∫≠t chung vui c√πng gia ƒë√¨nh ch√∫ng t√¥i.</p>
          <p>V√†o l√∫c: 10:00 Th·ª© b·∫£y</p>
          <p>24.01.2026</p>
          <p>(T·ª©c ng√†y 06 th√°ng 12 nƒÉm ·∫§t T·ªµ)</p>
          <p>T·∫°i : Ph·ªß Ch·ªß t·ªãch</p>
          <p>S·ªë 01 Ho√†n Ki·∫øm H√† N·ªôi</p>
          <p>S·ª± hi·ªán di·ªán c·ªßa qu√Ω v·ªã</p>
          <p>l√† ni·ªÅm vinh h·∫°nh cho gia ƒë√¨nh ch√∫ng t√¥i.</p>
          <div class="footer-display_2">
            <div class="footer_2">
              <div class="left-box_2">
                <div class="label_2">Nh√† Trai</div>
                <div class="label_2">Nguy·ªÖn VƒÉn T·ªµ</div>
                <div class="label_2">ƒê·ªó Th·ªã H·∫£i</div>
              </div>
              <div class="right-box_2">
                <div class="label_2">Nh√† G√°i</div>
                <div class="label_2">Tr∆∞∆°ng Ti·∫øn Th·ª•c</div>
                <div class="label_2">Phan Th·ªã H·ªìng The</div>
              </div>
            </div>
          </div>
        `;
        updateInvitationRSVPStatus(data); // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph·∫£n h·ªìi ban ƒë·∫ßu
        // if (data.rsvp === 'pending') {
        rsvpDiv.style.display = 'block';
        // }
      } else {
        invitationDiv.innerHTML = '<p>Kh√¥ng t√¨m th·∫•y th√¥ng tin kh√°ch m·ªùi.</p>';
      }
    })
    .catch(error => {
      invitationDiv.innerHTML = `<p>L·ªói khi t·∫£i d·ªØ li·ªáu: ${error.message}</p>`;
    });
}

const wishesInput = document.getElementById('wishesText'); // Th√™m d√≤ng n√†y

function sendRSVP(status) {
  const confirmText = status === 'accepted'
    ? 'B·∫°n x√°c nh·∫≠n s·∫Ω tham d·ª± ch·ª©?'
    : 'B·∫°n x√°c nh·∫≠n s·∫Ω kh√¥ng tham d·ª±?';

  if (!confirm(confirmText)) return;

  const guestWishes = wishesInput ? wishesInput.value : '';
  db.collection('guests').doc(guestId).update({ rsvp: status, wishes: guestWishes })
    .then(() => {
      alert('C·∫£m ∆°n b·∫°n ƒë√£ ph·∫£n h·ªìi!');
      // rsvpDiv.style.display = 'none'; // ·∫®n ph·∫ßn RSVP
      // location.reload();
      rsvpDiv.style.display = 'none';
      wishesDialog.querySelector('.dialog-content').innerHTML = `
      <button class="close-button" id="closeWishesDialogOnThanks">√ó</button>
        <div class="dialog-thanks-section" style="display:block;">
          <div class="dialog-thanks-content">
            <h2>Xin ch√¢n th√†nh c·∫£m ∆°n!</h2>
            <p>R·∫•t h√¢n h·∫°nh ƒë∆∞·ª£c ƒë√≥n ti·∫øp</p>
            <p class="dialog-couple-signature">Thanh T√πng & Th·ª•c Anh</p>
          </div>
        </div>
      `;
      const closeButtonOnThanks = document.getElementById('closeWishesDialogOnThanks');
      if (closeButtonOnThanks) {
        closeButtonOnThanks.addEventListener('click', () => {
          wishesDialog.style.display = 'none';
          // T√πy ch·ªçn: t·∫£i l·∫°i trang sau khi ƒë√≥ng dialog c·∫£m ∆°n,
          // ho·∫∑c b·∫°n c√≥ th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i tr√™n trang m√† kh√¥ng c·∫ßn t·∫£i l·∫°i.
          //location.reload();
          db.collection('guests').doc(guestId).get()
            .then(doc => {
              if (doc.exists) {
                updateInvitationRSVPStatus(doc.data()); // C·∫≠p nh·∫≠t tr·∫°ng th√°i tr√™n thi·ªáp m·ªùi
              }
            })
            .catch(error => {
              console.error("L·ªói khi t·∫£i l·∫°i d·ªØ li·ªáu kh√°ch m·ªùi ƒë·ªÉ c·∫≠p nh·∫≠t UI:", error);
            });

        });
      }
    })
    .catch(err => {
      alert('L·ªói khi g·ª≠i ph·∫£n h·ªìi: ' + err.message);
    });
}

document.addEventListener('DOMContentLoaded', () => {
  const hamburgerToggle = document.querySelector('.hamburger-menu-toggle');
  const navLinksContainer = document.querySelector('.nav-links-container');
  const navButtons = document.querySelectorAll('.nav-links-container .nav-button'); // Ch·ªçn t·∫•t c·∫£ c√°c n√∫t nav

  if (hamburgerToggle && navLinksContainer) {
    hamburgerToggle.addEventListener('click', (event) => {
      event.stopPropagation();
      navLinksContainer.classList.toggle('active');
      hamburgerToggle.classList.toggle('active'); // Th√™m class 'active' cho icon hamburger
    });

    // ƒê√≥ng menu khi click v√†o m·ªôt n√∫t ƒëi·ªÅu h∆∞·ªõng
    navButtons.forEach(button => {
      button.addEventListener('click', (event) => {
        event.stopPropagation();
        // Ki·ªÉm tra n·∫øu menu ƒëang m·ªü (c√≥ class 'active') tr√™n mobile th√¨ ƒë√≥ng l·∫°i
        if (window.innerWidth <= 768 && navLinksContainer.classList.contains('active')) {
          navLinksContainer.classList.remove('active');
          hamburgerToggle.classList.remove('active');
        }
      });
    });

    // Close menu if click anywhere
    document.addEventListener('click', (event) => {
      // Ki·ªÉm tra xem click c√≥ n·∫±m ngo√†i khu v·ª±c menu v√† menu ƒëang m·ªü kh√¥ng
      if (window.innerWidth <= 768 && navLinksContainer.classList.contains('active')) {
        navLinksContainer.classList.remove('active');
        hamburgerToggle.classList.remove('active');
      }
    });
  }

  // --- C√°c ƒëo·∫°n m√£ JavaScript kh√°c c·ªßa b·∫°n (gallery.js, music.js, v.v.) s·∫Ω ·ªü ƒë√¢y ---
  // ƒê·∫£m b·∫£o r·∫±ng b·∫°n ƒë√£ k·∫øt h·ª£p t·∫•t c·∫£ logic JS v√†o m·ªôt t·ªáp ho·∫∑c t·∫£i ch√∫ng theo ƒë√∫ng th·ª© t·ª±.
});
